/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 /Users/hhe/Downloads/Interactive3DPortal-main/client/husseinlopol.glb --transform --types 
Files: /Users/hhe/Downloads/Interactive3DPortal-main/client/husseinlopol.glb [72.03MB] > /Users/hhe/Downloads/Interactive3DPortal-main/husseinlopol-transformed.glb [3.21MB] (96%)
*/

import * as THREE from 'three'
import React, { useEffect, useState } from 'react'
import { useGraph } from '@react-three/fiber'
import { useGLTF, useAnimations } from '@react-three/drei'
import { GLTF, SkeletonUtils } from 'three-stdlib'

// We'll create a more accurate list of animation names
type ActionName = 'idle' | 'walk' | 'run' | 'Armature' | string

interface GLTFAction extends THREE.AnimationClip {
  name: ActionName
}

type GLTFResult = GLTF & {
  nodes: {
    mesh: THREE.SkinnedMesh
    mixamorigHips: THREE.Bone
  }
  materials: {
    ['Material.001']: THREE.MeshStandardMaterial
  }
  animations: GLTFAction[]
}

// Define custom props for our model
interface ModelProps {
  animation?: ActionName
  position?: THREE.Vector3 | [number, number, number]
  rotation?: THREE.Euler | [number, number, number]
  scale?: THREE.Vector3 | [number, number, number] | number
  [key: string]: any
}

export function Model({ animation = 'idle', ...props }: ModelProps) {
  const group = React.useRef<THREE.Group>(null)
  const { scene, animations } = useGLTF('/husseinlopol-transformed.glb')
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])
  const { nodes, materials } = useGraph(clone) as GLTFResult
  const { actions, names } = useAnimations(animations, group)
  const [currentAnimation, setCurrentAnimation] = useState<ActionName>(animation)
  
  // Log available animations on mount
  useEffect(() => {
    console.log('Available animations:', names);
    
    // Map the default 'Armature' animation to 'idle' if needed
    if (!names.includes('idle') && names.includes('Armature')) {
      actions['Armature']?.reset().fadeIn(0.5).play();
    } else if (actions[currentAnimation]) {
      // Play the specified animation
      actions[currentAnimation]?.reset().fadeIn(0.5).play();
    }
    
    return () => {
      // Clean up all animations on unmount
      Object.values(actions).forEach(action => action?.fadeOut(0.5));
    };
  }, [actions, names, currentAnimation]);
  
  // Update animation when prop changes
  useEffect(() => {
    if (animation !== currentAnimation) {
      // Fade out current animation
      actions[currentAnimation]?.fadeOut(0.3);
      
      // Fade in new animation
      actions[animation]?.reset().fadeIn(0.3).play();
      
      // Update current animation
      setCurrentAnimation(animation);
    }
  }, [animation, actions, currentAnimation]);
  
  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="Armature" rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
          <primitive object={nodes.mixamorigHips} />
        </group>
        <skinnedMesh 
          name="mesh" 
          geometry={nodes.mesh.geometry} 
          material={materials['Material.001']} 
          skeleton={nodes.mesh.skeleton} 
          rotation={[Math.PI / 2, 0, 0]} 
          scale={0.01}
          castShadow 
          receiveShadow
        />
      </group>
    </group>
  )
}

useGLTF.preload('/husseinlopol-transformed.glb')
